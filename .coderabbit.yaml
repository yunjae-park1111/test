# yaml-language-server: $schema=https://storage.googleapis.com/coderabbit_public_assets/schema.v2.json

# CodeRabbit 설정 - AI Platform Web UI
# 📝 주석 처리된 값들은 대시보드 기본값입니다
# 📚 상세 설명: docs/coderabbit-config.md

language: "ko-KR"  # 기본값: 'en-US' | 리뷰 언어 설정
tone_instructions: "AI/ML 플랫폼 관점에서 Kubernetes·FastAPI·React·vLLM·Kubeflow·모니터링 모범 사례를 준수해 실용성과 유지보수성을 중시해 리뷰하세요. 보안/성능/확장성에 특히 주의하고 멀티서비스 아키텍처와 워크플로우 맥락을 고려합니다."  # AI Platform 전용 리뷰 톤
early_access: false  # 기본값: false | 베타 기능 활성화
enable_free_tier: true  # 기본값: true | 무료 플랜 기능 사용

reviews:
  profile: 'chill'  # 기본값: 'chill' | 리뷰 강도 설정 (chill/assertive)
  request_changes_workflow: false  # 기본값: false | 변경사항 요청 워크플로우
  high_level_summary: true  # 기본값: true | PR 상위 수준 요약 생성
  high_level_summary_placeholder: "@coderabbitai summary"  # 기본값: "@coderabbitai summary" | 요약 플레이스홀더
  high_level_summary_in_walkthrough: true  # 기본값: false | 워크스루에 요약 포함
  auto_title_placeholder: "@coderabbitai"  # 기본값: "@coderabbitai" | 자동 제목 생성 키워드
  auto_title_instructions: ""  # 기본값: "" | 자동 제목 생성 지침 (GitHub Actions에서 처리)
  review_status: true  # 기본값: true | 리뷰 상태 코멘트 게시
  commit_status: true  # 기본값: true | Git 커밋 상태 업데이트
  fail_commit_status: false  # 기본값: false | 리뷰 실패시 커밋 상태 failure
  collapse_walkthrough: false  # 기본값: false | 워크스루 접기
  changed_files_summary: true  # 기본값: true | 변경된 파일 요약
  sequence_diagrams: true  # 기본값: true | 시퀀스 다이어그램 생성
  estimate_code_review_effort: true  # 기본값: true | 리뷰 노력도 추정
  assess_linked_issues: false  # 기본값: true | 연결된 이슈 해결도 평가
  related_issues: false  # 기본값: true | 관련 이슈 표시
  related_prs: false  # 기본값: true | 관련 PR 표시
  suggested_labels: false  # 기본값: true | 라벨 제안
  auto_apply_labels: false  # 기본값: false | 라벨 자동 적용
  suggested_reviewers: false  # 기본값: true | 리뷰어 제안
  auto_assign_reviewers: false  # 기본값: false | 리뷰어 자동 할당
  poem: false  # 기본값: true | 시 생성 (업무용 PR에서 불필요)
  labeling_instructions: []  # 기본값: [] | 라벨링 가이드라인

  path_filters:  # 리뷰 대상 파일 패턴
    - "**/*.{js,ts,jsx,tsx}"
    - "**/*.{py,prisma,sql}"
    - "**/*.{yml,yaml,json,md}"
    - "**/Dockerfile*"  # Dockerfile, Dockerfile.dev 등
    - "**/*.Dockerfile"  # tmp.Dockerfile, prod.Dockerfile 등
    - "**/docker-compose*.{yml,yaml}"  # docker-compose 파일들
    - "**/.dockerignore"  # Docker ignore 파일
    - "**/.gitignore"  # Git ignore 파일
    - "!node_modules/**"
    - "!dist/**"
    - "!build/**"
    - "!coverage/**"
    - "!server/**"  # 사용하지 않는 server 폴더 제외
    - "!**/.next/**"
    - "!**/.turbo/**"
    - "!**/.vercel/**"
    - "!**/.cache/**"
    - "!**/.vite/**"
    - "!**/.pnpm-store/**"
    - "!**/*.min.*"
    - "!**/*.lock"
    - "!**/pnpm-lock.yaml"
    - "!**/package-lock.json"
    - "!**/yarn.lock"
    - "!**/bun.lockb"
    - "!**/.DS_Store"

  path_instructions:
    - path: "ai-platform-backend/**/*.py"
      instructions: "FastAPI 모범 사례, async/await 패턴, Pydantic 모델 검증, SQLAlchemy ORM 최적화, Kubernetes API 호출 시 에러 핸들링, Kubeflow 파이프라인 통합, Prometheus 메트릭 수집을 중점적으로 검토"
    - path: "vllm-benchmark/**/*.py"
      instructions: "MongoDB 쿼리 최적화, GitHub API 통합, Kubernetes API 호출, 벤치마크 정확성, 큐 관리 로직, 비동기 처리 패턴을 중점적으로 검토"
    - path: "apps/web/**/*.{ts,tsx}"
      instructions: "React 18 모범 사례, TypeScript strict 모드, 9ui 컴포넌트 패턴, TailwindCSS 일관성, Zustand 상태 관리, 성능 최적화를 중점적으로 검토"
    - path: "packages/**/*.{ts,tsx}"
      instructions: "모노레포 패키지 구조, 공유 컴포넌트 재사용성, TypeScript 타입 안전성, API 클라이언트 일관성을 중점적으로 검토"
    - path: "helm/**/*.{yaml,yml}"
      instructions: "Helm 차트 모범 사례, 값 검증, 리소스 제한, 보안 설정, 네임스페이스 격리를 중점적으로 검토"
    - path: "**/k8s/**/*.{yaml,yml}"
      instructions: "Kubernetes 매니페스트 보안성, RBAC 설정, 리소스 요청/제한, 네트워크 정책을 중점적으로 검토"
    - path: "**/Dockerfile*"
      instructions: "Docker 보안 모범 사례, 멀티스테이지 빌드, 이미지 크기 최적화, 취약점 최소화를 중점적으로 검토"
    - path: "**/docker-compose*.{yml,yaml}"
      instructions: "Docker Compose 보안 설정, 네트워크 분리, 볼륨 마운트 보안, 환경 변수 관리, 리소스 제한, 서비스 간 의존성 최적화를 중점적으로 검토"
    - path: "**/compose.{yml,yaml}"
      instructions: "Compose v2 파일도 동일 기준으로 검토"
    - path: "**/.gitignore"
      instructions: "보안 관련 파일 누락 확인 (환경 변수, 키 파일, 인증서), 빌드 결과물 제외, IDE 설정 파일, 로그 파일, 캐시 디렉토리 적절한 제외 여부를 중점적으로 검토"
  abort_on_close: true  # 기본값: true | PR 닫힘시 리뷰 중단
  disable_cache: false  # 기본값: false | 캐시 비활성화

  finishing_touches:
    docstrings:
      enabled: true  # 기본값: true | 독스트링 자동 생성
    unit_tests:
      enabled: true  # 기본값: true | 단위 테스트 자동 생성

  auto_review:
    enabled: true  # 기본값: true | 자동 리뷰 활성화
    auto_incremental_review: true  # 기본값: true | 증분 리뷰
    ignore_title_keywords: []  # 기본값: [] | 리뷰 제외 키워드
    labels: []  # 기본값: [] | 리뷰 대상 라벨 필터
    drafts: false  # 기본값: false | 드래프트 PR 리뷰
    base_branches:  # 리뷰 대상 브랜치
      - "^main$"
      - "^dev$"
      - "^epic/.*"
      - "^release-v.*"
    ignore_usernames: []  # 기본값: [] | 리뷰 제외 사용자

chat:
  art: true  # 기본값: true | 채팅 아트 생성
  auto_reply: false  # 기본값: true | 자동 응답
  integrations:
    jira:
      usage: auto  # 기본값: auto | Jira 통합 (auto/enabled/disabled)
    linear:
      usage: auto  # 기본값: auto | Linear 통합 (auto/enabled/disabled)

knowledge_base:
  opt_out: false  # 기본값: false | 지식 베이스 비활성화
  web_search:
    enabled: true  # 기본값: true | 웹 검색 통합
  code_guidelines:
    enabled: true  # 기본값: true | 코딩 가이드라인 적용
    filePatterns:  # 코딩 가이드라인 문서 패턴
      - "docs/**/*.md"
      - "**/README.md"
      - ".cursorrules"
      - ".cursor/rules/**/*"
      - "ai-platform-backend/**/docs/**/*.md"
      - "vllm-benchmark/**/docs/**/*.md"
  learnings:
    scope: auto  # 기본값: auto | 학습 범위 (local/global/auto)
  issues:
    scope: auto  # 기본값: auto | 이슈 범위 (local/global/auto)
  jira:
    usage: auto  # 기본값: auto | Jira 지식베이스 통합
    project_keys: []  # 기본값: [] | Jira 프로젝트 키
  linear:
    usage: auto  # 기본값: auto | Linear 지식베이스 통합
    team_keys: []  # 기본값: [] | Linear 팀 키
  pull_requests:
    scope: auto  # 기본값: auto | PR 범위 (local/global/auto)
  mcp:
    usage: auto  # 기본값: auto | MCP 통합
    disabled_servers: []  # 기본값: [] | 비활성화할 MCP 서버

code_generation:
  docstrings:
    language: "ko-KR"  # 기본값: 'en-US' | 독스트링 생성 언어
    path_instructions:  # 경로별 독스트링 지침
      - path: "ai-platform-backend/**/*.py"
        instructions: "FastAPI 엔드포인트는 OpenAPI 스키마에 맞는 상세한 독스트링 작성. 쿠버네티스 리소스 조작 함수는 에러 케이스와 권한 요구사항 명시. Kubeflow 파이프라인 함수는 워크플로우 단계와 의존성 기술. Prometheus 메트릭 함수는 수집 주기와 라벨 정보 포함"
      - path: "vllm-benchmark/**/*.py"
        instructions: "벤치마크 함수는 입력 파라미터, 측정 메트릭, 반환값 형식을 명확히 기술. MongoDB 연동 함수는 쿼리 패턴과 인덱싱 정보 포함. Kubernetes API 호출 함수는 리소스 타입과 에러 처리 방법 명시. FastAPI 엔드포인트는 요청/응답 스키마 문서화"
      - path: "apps/web/**/*.{ts,tsx}"
        instructions: "React 18 컴포넌트는 props, 상태, 이벤트 핸들러에 대한 TSDoc 작성. 커스텀 훅은 사용법과 의존성 명시. 9ui 컴포넌트는 variant와 size props 문서화. Vitest 테스트 함수는 테스트 목적과 시나리오 명시"
      - path: "packages/**/*.{ts,tsx}"
        instructions: "공유 패키지는 API 인터페이스와 사용 예시를 포함한 상세 문서화. 타입 정의는 제네릭 사용법과 제약사항 명시. UI 컴포넌트는 props와 사용법, API 클라이언트는 엔드포인트별 호출 방법과 에러 케이스 문서화"
  unit_tests:
    path_instructions:  # 경로별 테스트 생성 지침
      - path: "ai-platform-backend/**/*.py"
        instructions: "FastAPI 엔드포인트는 pytest + httpx로 integration test 생성. 쿠버네티스 API 호출은 mock 사용하여 unit test 작성. Kubeflow 파이프라인은 mock 워크플로우로 테스트. Prometheus 메트릭은 test collector로 검증"
      - path: "vllm-benchmark/**/*.py"
        instructions: "벤치마크 함수는 입력 파라미터와 예외 상황에 대한 기본 pytest 테스트 생성. MongoDB 연동과 Kubernetes API 호출은 mock 사용. 아직 테스트 인프라가 구축되지 않았으므로 기본적인 unit test 패턴 제안"
      - path: "apps/web/**/*.{ts,tsx}"
        instructions: "React 18 컴포넌트는 Vitest + React Testing Library로 render/interaction 테스트 생성. 커스텀 훅은 renderHook 사용. API 호출은 vi.fn()으로 fetch mock, 모듈은 vi.mock() 사용"
      - path: "packages/**/*.{ts,tsx}"
        instructions: "기본적인 Vitest + React Testing Library 테스트 구조 제안. 공유 컴포넌트는 props 검증과 렌더링 테스트, API 클라이언트는 기본 호출과 에러 처리 테스트 패턴 제안"