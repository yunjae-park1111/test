apiVersion: v1
kind: ServiceAccount
metadata:
  name: alaz-serviceaccount
  namespace: anteon
---
# For alaz to keep track of changes in cluster
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: alaz-role
  namespace: anteon
rules:
- apiGroups:
  - "*"
  resources:
  - pods
  - services
  - endpoints
  - replicasets
  - deployments
  - daemonsets
  - statefulsets
  verbs:
  - "get"
  - "list"
  - "watch"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: alaz-role-binding
  namespace: anteon
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: alaz-role
subjects:
- kind: ServiceAccount
  name: alaz-serviceaccount
  namespace: anteon
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: alaz-daemonset
  namespace: anteon
spec:
  selector:
    matchLabels:
      app: alaz
  template:
    metadata:
      labels:
        app: alaz
    spec:
      hostPID: true
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      initContainers:
      - name: setup-cri-socket
        image: busybox:1.35
        command: 
        - sh
        - -c
        - |
          echo "=== Debugging CRI socket setup ==="
          echo "Checking for CRI socket paths..."
          
          # Check available sockets
          echo "Available sockets in /var/run:"
          ls -la /var/run/ | grep sock || echo "No .sock files found"
          echo "Checking k3s directory:"
          ls -la /var/run/k3s/ 2>/dev/null || echo "k3s directory not found"
          ls -la /var/run/k3s/cri-dockerd/ 2>/dev/null || echo "cri-dockerd directory not found"
          
          mkdir -p /proc/1/root/var/run
          echo "Created directory /proc/1/root/var/run"
          
          # Use the actual CRI socket from k3s
          if [ -S /proc/1/root/var/run/k3s/cri-dockerd/cri-dockerd.sock ]; then
            ln -sf /proc/1/root/var/run/k3s/cri-dockerd/cri-dockerd.sock /proc/1/root/var/run/cri-dockerd.sock
            echo "✅ Created symlink for CRI socket using k3s cri-dockerd from host"
          else
            echo "❌ No suitable CRI socket found"
          fi
          
          echo "Final result:"
          ls -la /proc/1/root/var/run/ || echo "❌ Failed to list target directory"
        volumeMounts:
        - mountPath: /host-docker-sock
          name: docker-sock
        securityContext:
          privileged: true
      containers:
      - env:
        - name: TRACING_ENABLED
          value: "true"
        - name: METRICS_ENABLED
          value: "true"
        - name: LOGS_ENABLED
          value: "false"
        - name: BACKEND_HOST
          value: http://nginx-service/api-alaz
        - name: LOG_LEVEL
          value: "1"
        # - name: EXCLUDE_NAMESPACES
        #   value: "^anteon.*"
        - name: MONITORING_ID
          value: 6c6a1903-b2e6-4c34-8814-e8b1667d0da4
        - name: SEND_ALIVE_TCP_CONNECTIONS  # Send undetected protocol connections (unknown connections)
          value: "false"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        args:
        - --no-collector.wifi
        - --no-collector.hwmon
        - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
        - --collector.netclass.ignored-devices=^(veth.*)$
        image: ddosify/alaz:v0.11.4
        imagePullPolicy: IfNotPresent
        name: alaz-pod
        ports:
        - containerPort: 8181
          protocol: TCP
        resources:
          limits:
            cpu: "2"
            memory: 1Gi
          requests:
            cpu: "0.5"
            memory: 400Mi
        securityContext:
          privileged: true 
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        # needed for linking ebpf trace programs
        volumeMounts:
        - mountPath: /sys/kernel/debug
          name: debugfs
          readOnly: false
        - mountPath: /host-docker-sock
          name: docker-sock
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: alaz-serviceaccount
      serviceAccountName: alaz-serviceaccount
      terminationGracePeriodSeconds: 30
      # needed for linking ebpf trace programs
      volumes:
      - name: debugfs
        hostPath:
          path: /sys/kernel/debug
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
